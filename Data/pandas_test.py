import geopandas as gpd
from zipfile import ZipFile
import os
import sys
import shutil
import glob
import matplotlib.pyplot as plt
from shapely.geometry import Polygon, LineString

def myrmdir(d):
    # Try to remove tree; 
    # if failed show an error using try...except on screen
    try:
        shutil.rmtree(d)
    except OSError as e:
        print ("Error: %s - %s." % (e.filename, e.strerror))

# {"type": "FeatureCollection","features": [
# { "type": "Feature", "properties": { "LINEARID": "11020239500", "FULLNAME": "Norfolk Southern Rlwy", "MTFCC": "R1011" }, "geometry": { "type": "LineString", "coordinates": [ [ -79.470579, 35.442826999108291 ], [ -79.469465, 35.444888999108265 ], [ -79.468907, 35.445828999108244 ], [ -79.468294, 35.446607999108224 ], [ -79.46687, 35.44789299910822 ] ] } },
# { "type": "Feature", "properties": { "LINEARID": "11020239501", "FULLNAME": "Norfolk Southern Rlwy", "MTFCC": "R1011" }, "geometry": { "type": "LineString", "coordinates": [ [ -79.46687, 35.44789299910822 ], [ -79.467623, 35.44695299910822 ], [ -79.4686, 35.445851999108243 ], [ -79.469046, 35.445232999108256 ], [ -79.470049, 35.443445999108278 ], [ -79.470579, 35.442826999108291 ] ] } },
# { "type": "Feature", "properties": { "LINEARID": "11020239502", "FULLNAME": "Norfolk Southern Rlwy", "MTFCC": "R1011" }, "geometry": { "type": "LineString", "coordinates": [ [ -79.668195, 35.421612999108518 ], [ -79.663283, 35.423583999108487 ], [ -79.66087, 35.424339999108476 ], [ -79.654667, 35.426241999108456 ], [ -79.651428, 35.427482999108442 ], [ -79.647553, 35.428936999108416 ], [ -79.644919, 35.430040999108414 ], [ -79.642656, 35.430880999108403 ], [ -79.642167, 35.431069999108395 ], [ -79.638545, 35.432576999108392 ], [ -79.636738, 35.433280999108376 ], [ -79.635487, 35.433641999108367 ], [ -79.634771, 35.433836999108365 ], [ -79.634043, 35.433949999108371 ], [ -79.626204, 35.433772999108378 ], [ -79.624474, 35.433733999108377 ], [ -79.619802, 35.433704999108379 ], [ -79.618841, 35.433620999108378 ], [ -79.618399, 35.433537999108374 ], [ -79.617476, 35.433330999108371 ], [ -79.616331, 35.432689999108383 ], [ -79.613789, 35.430924999108406 ], [ -79.612979, 35.430465999108407 ], [ -79.611832, 35.430143999108402 ], [ -79.61133, 35.430121999108394 ], [ -79.610238, 35.430371999108395 ], [ -79.60562, 35.431969999108389 ], [ -79.604166, 35.432266999108386 ], [ -79.603963, 35.432245999108382 ], [ -79.60283, 35.432128999108386 ], [ -79.602391, 35.432082999108395 ], [ -79.598975, 35.431728999108387 ], [ -79.598903, 35.431721999108404 ], [ -79.597685, 35.431594999108398 ], [ -79.597004, 35.431524999108412 ], [ -79.596277, 35.431477999108402 ], [ -79.596206, 35.431501999108384 ], [ -79.594869, 35.431935999108397 ], [ -79.594286, 35.432271999108387 ], [ -79.593292, 35.43300099910838 ], [ -79.592196, 35.434049999108368 ], [ -79.591087, 35.434863999108359 ], [ -79.590392, 35.435098999108369 ], [ -79.589911, 35.435178999108359 ], [ -79.588834, 35.435058999108357 ], [ -79.588586, 35.435014999108347 ], [ -79.586889, 35.43447499910836 ], [ -79.585613, 35.434039999108371 ], [ -79.585126, 35.433881999108365 ], [ -79.582381, 35.433068999108372 ], [ -79.581683, 35.432837999108379 ], [ -79.579625, 35.432073999108397 ], [ -79.577055, 35.431186999108412 ], [ -79.576889, 35.4311299991084 ], [ -79.575435, 35.430921999108392 ], [ -79.574036, 35.430781999108419 ], [ -79.573589, 35.430759999108403 ], [ -79.573036, 35.430751999108409 ], [ -79.571659, 35.430707999108407 ], [ -79.569842, 35.430837999108412 ], [ -79.569156, 35.430895999108394 ], [ -79.567939, 35.431136999108404 ], [ -79.567613, 35.431200999108398 ], [ -79.567349, 35.431252999108388 ], [ -79.566117, 35.431594999108398 ], [ -79.565564, 35.431841999108393 ], [ -79.563495, 35.432700999108391 ], [ -79.562427, 35.433308999108377 ], [ -79.561131, 35.433967999108368 ], [ -79.553486, 35.436267999108345 ], [ -79.552506, 35.43656399910833 ], [ -79.552116, 35.436700999108332 ], [ -79.543438, 35.439330999108307 ], [ -79.540957, 35.440061999108316 ], [ -79.539828, 35.440218999108303 ], [ -79.53839, 35.440122999108311 ], [ -79.535033, 35.439837999108306 ], [ -79.529138, 35.439112999108318 ], [ -79.523594, 35.438439999108319 ], [ -79.522768, 35.438223999108324 ], [ -79.52228, 35.438093999108311 ], [ -79.521137, 35.43742499910833 ], [ -79.519953, 35.436550999108348 ], [ -79.51647, 35.433864999108366 ], [ -79.512496, 35.431940999108399 ], [ -79.507317, 35.429633999108418 ], [ -79.504658, 35.428349999108448 ], [ -79.502083, 35.427183999108429 ], [ -79.500682, 35.426956999108441 ], [ -79.499708, 35.426979999108454 ], [ -79.494946, 35.427317999108418 ], [ -79.494218, 35.427434999108442 ], [ -79.493601, 35.427418999108447 ], [ -79.49275, 35.427875999108437 ], [ -79.491295, 35.428304999108441 ], [ -79.489175, 35.428872999108428 ], [ -79.487861, 35.429080999108407 ], [ -79.48719, 35.429265999108416 ], [ -79.485821, 35.43004699910842 ], [ -79.48384, 35.431950999108388 ], [ -79.483648, 35.432088999108394 ], [ -79.482024, 35.433255999108383 ], [ -79.479289, 35.435232999108351 ], [ -79.478479, 35.435623999108337 ], [ -79.476802, 35.436015999108349 ], [ -79.475265, 35.436866999108332 ], [ -79.473142, 35.43819899910833 ], [ -79.47264, 35.438748999108327 ], [ -79.471445, 35.441383999108282 ], [ -79.471021, 35.442086999108291 ], [ -79.470579, 35.442826999108291 ] ] } },


def extract_zip_tostring(input_zip):
    input_zip=ZipFile(input_zip)
    return {name: input_zip.read(name) for name in input_zip.namelist()}

def extract_zip_tofile(tempdir,zipf):
    ZipFile(zipf).extractall(tempdir)

if __name__=='__main__':
    #tempdir = "./temp_railroads/"
    # print("Extracting us_railroads ...")
    # zipf = "us_railroads.geojson.zip"
    # extract_zip_tofile(tempdir,zipf)
    # files = glob.glob(tempdir+'*.geojson')
    # print(files[0])

    print("Loading railroads ...")
    #_with_states0
    rails = gpd.read_file("zip://us_railroads/us_railroads.geojson.zip")

    print("Loading states ...")
    states = gpd.read_file("countries_states/us_state_polygons_5m.geojson")

    # print("Plotting ...")
    # geodf.plot()

    
    
    # pandas_test.py:51: UserWarning: Geometry is in a geographic CRS. 
    # Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' 
    # to re-project geometries to a projected CRS before this operation.

    # rails = rails.to_crs("EPSG:3395")

    # print(rails.crs)
    # rails['envelope'] = rails.envelope
    # rails['centroid_column'] = rails.centroid

    print(rails.head())

    print(states.head())

    texas = states.loc[states['NAME'] == 'Texas']

    print(texas)

    texrails = rails.intersects(texas)

    print(texrails)
